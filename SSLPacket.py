from json import JSONEncoder
import json


# Handshake Records
# Handshake records contain a set of messages that are used in order to handshake. These are the messages and their values:

# Hello Request (0, 0x00)
# Client Hello (1, 0x01)
# Server Hello (2, 0x02)
# Certificate (11, 0x0B)
# Server Key Exchange (12, 0x0C)
# Certificate Request (13, 0x0D)
# Server Hello Done (14, 0x0E)
# Certificate Verify (15, 0x0F)
# Client Key Exchange (16, 0x10)
# Finished (20, 0x14)

# These are values for the type field in the SSLPacket class
H_SHAKE = 22 # Handshake
H_BEAT = 24 # Heart Beat

# These are values for the payload_type field in the SSLPacket class
C_HELLO = 1 # Client Hello
S_HELLO = 2 # Server Hello
CERT = 11 # Certificate
S_KEY_EX = 12 # Server Key Exchange
CERT_REQ = 13 # Certificate Request
S_HELLO_FIN = 14 # Server Hello Done
CERT_VERIFY = 15 # Certificate Verify
C_KEY_EX = 16 # Client Key Exchange
FIN = 20 # Finished
END = 21 # End


class SSLPacket(object):
    def __init__(self, type=None, length=None, payload_type=None, payload=None, fin=False, version=1):
        self.type = type # type of packet
        self.length = length # length of packet
        self.version = version # version of packet
        self.fin = fin # fin indicates final packet of a handshake

        # data
        self.payload_type = payload_type # type of payload
        self.payload = payload # payload is the data

    # encode class data to string
    def encode(self):
        d = {
            "type": self.type,
            "length": self.length,
            "version": self.version,
            "fin": self.fin,
            "payload_type": self.payload_type,
            "payload": self.payload,
        }
        return json.dumps(d).encode() # dumps() serialises d to JSON formatted str ; .encode() encodes the string into UTF-8, which is standard text encoding for unicode chars

    # decode byte object to this class object
    def decode(self, byte_obj):
        string = byte_obj.decode() # decode() decodes the byte object into a string

        try: # try to decode the string into a JSON object and set the class variables to the values of the JSON object
            d = json.loads(string)
            # print(d)
            self.type = d["type"]
            self.length = d["length"]
            self.version = d["version"]
            self.fin = d["fin"]
            self.payload_type = d["payload_type"]
            self.payload = d["payload"]
            return self
        except:
            return self

